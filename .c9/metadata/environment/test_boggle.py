{"filter":false,"title":"test_boggle.py","tooltip":"/test_boggle.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":43,"column":7},"end":{"row":43,"column":8},"action":"insert","lines":[" "],"id":225},{"start":{"row":43,"column":8},"end":{"row":43,"column":9},"action":"insert","lines":["t"]},{"start":{"row":43,"column":9},"end":{"row":43,"column":10},"action":"insert","lines":["e"]},{"start":{"row":43,"column":10},"end":{"row":43,"column":11},"action":"insert","lines":["s"]},{"start":{"row":43,"column":11},"end":{"row":43,"column":12},"action":"insert","lines":["t"]},{"start":{"row":43,"column":12},"end":{"row":43,"column":13},"action":"insert","lines":["_"]},{"start":{"row":43,"column":13},"end":{"row":43,"column":14},"action":"insert","lines":["n"]}],[{"start":{"row":43,"column":14},"end":{"row":43,"column":15},"action":"insert","lines":["e"],"id":226},{"start":{"row":43,"column":15},"end":{"row":43,"column":16},"action":"insert","lines":["i"]},{"start":{"row":43,"column":16},"end":{"row":43,"column":17},"action":"insert","lines":["g"]},{"start":{"row":43,"column":17},"end":{"row":43,"column":18},"action":"insert","lines":["h"]},{"start":{"row":43,"column":18},"end":{"row":43,"column":19},"action":"insert","lines":["b"]},{"start":{"row":43,"column":19},"end":{"row":43,"column":20},"action":"insert","lines":["o"]},{"start":{"row":43,"column":20},"end":{"row":43,"column":21},"action":"insert","lines":["r"]},{"start":{"row":43,"column":21},"end":{"row":43,"column":22},"action":"insert","lines":["s"]}],[{"start":{"row":43,"column":22},"end":{"row":43,"column":23},"action":"insert","lines":["_"],"id":227},{"start":{"row":43,"column":23},"end":{"row":43,"column":24},"action":"insert","lines":["o"]},{"start":{"row":43,"column":24},"end":{"row":43,"column":25},"action":"insert","lines":["f"]},{"start":{"row":43,"column":25},"end":{"row":43,"column":26},"action":"insert","lines":["_"]},{"start":{"row":43,"column":26},"end":{"row":43,"column":27},"action":"insert","lines":["a"]}],[{"start":{"row":43,"column":27},"end":{"row":43,"column":28},"action":"insert","lines":["_"],"id":228},{"start":{"row":43,"column":28},"end":{"row":43,"column":29},"action":"insert","lines":["p"]},{"start":{"row":43,"column":29},"end":{"row":43,"column":30},"action":"insert","lines":["o"]},{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"insert","lines":["s"]},{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"insert","lines":["i"]},{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"insert","lines":["t"]},{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"insert","lines":["i"]},{"start":{"row":43,"column":34},"end":{"row":43,"column":35},"action":"insert","lines":["o"]}],[{"start":{"row":43,"column":35},"end":{"row":43,"column":36},"action":"insert","lines":["n"],"id":229}],[{"start":{"row":43,"column":36},"end":{"row":43,"column":38},"action":"insert","lines":["()"],"id":230}],[{"start":{"row":43,"column":37},"end":{"row":43,"column":38},"action":"insert","lines":["s"],"id":231},{"start":{"row":43,"column":38},"end":{"row":43,"column":39},"action":"insert","lines":["e"]},{"start":{"row":43,"column":39},"end":{"row":43,"column":40},"action":"insert","lines":["l"]},{"start":{"row":43,"column":40},"end":{"row":43,"column":41},"action":"insert","lines":["f"]}],[{"start":{"row":43,"column":42},"end":{"row":43,"column":43},"action":"insert","lines":[":"],"id":232}],[{"start":{"row":43,"column":43},"end":{"row":44,"column":0},"action":"insert","lines":["",""],"id":233},{"start":{"row":44,"column":0},"end":{"row":44,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":44,"column":8},"end":{"row":45,"column":0},"action":"insert","lines":["",""],"id":234},{"start":{"row":45,"column":0},"end":{"row":45,"column":8},"action":"insert","lines":["        "]},{"start":{"row":45,"column":8},"end":{"row":45,"column":9},"action":"insert","lines":["c"]},{"start":{"row":45,"column":9},"end":{"row":45,"column":10},"action":"insert","lines":["o"]},{"start":{"row":45,"column":10},"end":{"row":45,"column":11},"action":"insert","lines":["o"]},{"start":{"row":45,"column":11},"end":{"row":45,"column":12},"action":"insert","lines":["r"]}],[{"start":{"row":45,"column":12},"end":{"row":45,"column":13},"action":"insert","lines":["d"],"id":235},{"start":{"row":45,"column":13},"end":{"row":45,"column":14},"action":"insert","lines":["s"]}],[{"start":{"row":45,"column":14},"end":{"row":45,"column":15},"action":"insert","lines":[" "],"id":236},{"start":{"row":45,"column":15},"end":{"row":45,"column":16},"action":"insert","lines":["="]}],[{"start":{"row":45,"column":16},"end":{"row":45,"column":17},"action":"insert","lines":[" "],"id":237}],[{"start":{"row":45,"column":17},"end":{"row":45,"column":19},"action":"insert","lines":["()"],"id":238}],[{"start":{"row":45,"column":18},"end":{"row":45,"column":19},"action":"insert","lines":["1"],"id":239},{"start":{"row":45,"column":19},"end":{"row":45,"column":20},"action":"insert","lines":[","]}],[{"start":{"row":45,"column":20},"end":{"row":45,"column":21},"action":"insert","lines":[" "],"id":240},{"start":{"row":45,"column":21},"end":{"row":45,"column":22},"action":"insert","lines":["2"]}],[{"start":{"row":45,"column":23},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":241},{"start":{"row":46,"column":0},"end":{"row":46,"column":8},"action":"insert","lines":["        "]},{"start":{"row":46,"column":8},"end":{"row":46,"column":9},"action":"insert","lines":["n"]},{"start":{"row":46,"column":9},"end":{"row":46,"column":10},"action":"insert","lines":["e"]},{"start":{"row":46,"column":10},"end":{"row":46,"column":11},"action":"insert","lines":["i"]},{"start":{"row":46,"column":11},"end":{"row":46,"column":12},"action":"insert","lines":["g"]},{"start":{"row":46,"column":12},"end":{"row":46,"column":13},"action":"insert","lines":["h"]}],[{"start":{"row":46,"column":13},"end":{"row":46,"column":14},"action":"insert","lines":["b"],"id":242},{"start":{"row":46,"column":14},"end":{"row":46,"column":15},"action":"insert","lines":["o"]},{"start":{"row":46,"column":15},"end":{"row":46,"column":16},"action":"insert","lines":["r"]},{"start":{"row":46,"column":16},"end":{"row":46,"column":17},"action":"insert","lines":["s"]}],[{"start":{"row":46,"column":17},"end":{"row":46,"column":18},"action":"insert","lines":[" "],"id":243},{"start":{"row":46,"column":18},"end":{"row":46,"column":19},"action":"insert","lines":["="]}],[{"start":{"row":46,"column":19},"end":{"row":46,"column":20},"action":"insert","lines":[" "],"id":244},{"start":{"row":46,"column":20},"end":{"row":46,"column":21},"action":"insert","lines":["b"]},{"start":{"row":46,"column":21},"end":{"row":46,"column":22},"action":"insert","lines":["o"]},{"start":{"row":46,"column":22},"end":{"row":46,"column":23},"action":"insert","lines":["g"]},{"start":{"row":46,"column":23},"end":{"row":46,"column":24},"action":"insert","lines":["g"]},{"start":{"row":46,"column":24},"end":{"row":46,"column":25},"action":"insert","lines":["l"]},{"start":{"row":46,"column":25},"end":{"row":46,"column":26},"action":"insert","lines":["e"]},{"start":{"row":46,"column":26},"end":{"row":46,"column":27},"action":"insert","lines":["."]},{"start":{"row":46,"column":27},"end":{"row":46,"column":28},"action":"insert","lines":["n"]}],[{"start":{"row":46,"column":28},"end":{"row":46,"column":29},"action":"insert","lines":["e"],"id":245},{"start":{"row":46,"column":29},"end":{"row":46,"column":30},"action":"insert","lines":["i"]},{"start":{"row":46,"column":30},"end":{"row":46,"column":31},"action":"insert","lines":["g"]},{"start":{"row":46,"column":31},"end":{"row":46,"column":32},"action":"insert","lines":["h"]},{"start":{"row":46,"column":32},"end":{"row":46,"column":33},"action":"insert","lines":["b"]},{"start":{"row":46,"column":33},"end":{"row":46,"column":34},"action":"insert","lines":["o"]},{"start":{"row":46,"column":34},"end":{"row":46,"column":35},"action":"insert","lines":["r"]},{"start":{"row":46,"column":35},"end":{"row":46,"column":36},"action":"insert","lines":["s"]}],[{"start":{"row":46,"column":36},"end":{"row":46,"column":37},"action":"insert","lines":["_"],"id":246},{"start":{"row":46,"column":37},"end":{"row":46,"column":38},"action":"insert","lines":["o"]},{"start":{"row":46,"column":38},"end":{"row":46,"column":39},"action":"insert","lines":["f"]}],[{"start":{"row":46,"column":39},"end":{"row":46,"column":40},"action":"insert","lines":["_"],"id":247},{"start":{"row":46,"column":40},"end":{"row":46,"column":41},"action":"insert","lines":["p"]},{"start":{"row":46,"column":41},"end":{"row":46,"column":42},"action":"insert","lines":["o"]},{"start":{"row":46,"column":42},"end":{"row":46,"column":43},"action":"insert","lines":["s"]},{"start":{"row":46,"column":43},"end":{"row":46,"column":44},"action":"insert","lines":["i"]},{"start":{"row":46,"column":44},"end":{"row":46,"column":45},"action":"insert","lines":["t"]},{"start":{"row":46,"column":45},"end":{"row":46,"column":46},"action":"insert","lines":["i"]},{"start":{"row":46,"column":46},"end":{"row":46,"column":47},"action":"insert","lines":["o"]},{"start":{"row":46,"column":47},"end":{"row":46,"column":48},"action":"insert","lines":["n"]}],[{"start":{"row":46,"column":48},"end":{"row":46,"column":50},"action":"insert","lines":["()"],"id":248}],[{"start":{"row":46,"column":49},"end":{"row":46,"column":50},"action":"insert","lines":["c"],"id":249},{"start":{"row":46,"column":50},"end":{"row":46,"column":51},"action":"insert","lines":["o"]},{"start":{"row":46,"column":51},"end":{"row":46,"column":52},"action":"insert","lines":["o"]},{"start":{"row":46,"column":52},"end":{"row":46,"column":53},"action":"insert","lines":["r"]},{"start":{"row":46,"column":53},"end":{"row":46,"column":54},"action":"insert","lines":["d"]},{"start":{"row":46,"column":54},"end":{"row":46,"column":55},"action":"insert","lines":["s"]}],[{"start":{"row":46,"column":56},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":250},{"start":{"row":47,"column":0},"end":{"row":47,"column":8},"action":"insert","lines":["        "]},{"start":{"row":47,"column":8},"end":{"row":47,"column":9},"action":"insert","lines":["s"]},{"start":{"row":47,"column":9},"end":{"row":47,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":47,"column":10},"end":{"row":47,"column":11},"action":"insert","lines":["l"],"id":251},{"start":{"row":47,"column":11},"end":{"row":47,"column":12},"action":"insert","lines":["f"]},{"start":{"row":47,"column":12},"end":{"row":47,"column":13},"action":"insert","lines":["."]},{"start":{"row":47,"column":13},"end":{"row":47,"column":14},"action":"insert","lines":["a"]},{"start":{"row":47,"column":14},"end":{"row":47,"column":15},"action":"insert","lines":["s"]},{"start":{"row":47,"column":15},"end":{"row":47,"column":16},"action":"insert","lines":["s"]},{"start":{"row":47,"column":16},"end":{"row":47,"column":17},"action":"insert","lines":["e"]},{"start":{"row":47,"column":17},"end":{"row":47,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":47,"column":18},"end":{"row":47,"column":19},"action":"insert","lines":["t"],"id":252}],[{"start":{"row":47,"column":13},"end":{"row":47,"column":19},"action":"remove","lines":["assert"],"id":253},{"start":{"row":47,"column":13},"end":{"row":47,"column":21},"action":"insert","lines":["assertIn"]}],[{"start":{"row":47,"column":21},"end":{"row":47,"column":23},"action":"insert","lines":["()"],"id":254}],[{"start":{"row":47,"column":22},"end":{"row":47,"column":24},"action":"insert","lines":["()"],"id":255}],[{"start":{"row":47,"column":23},"end":{"row":47,"column":24},"action":"insert","lines":["0"],"id":256},{"start":{"row":47,"column":24},"end":{"row":47,"column":25},"action":"insert","lines":[","]}],[{"start":{"row":47,"column":25},"end":{"row":47,"column":26},"action":"insert","lines":[" "],"id":257},{"start":{"row":47,"column":26},"end":{"row":47,"column":27},"action":"insert","lines":["1"]}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":29},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","            ","    ","    def test_neighbors_of_a_position(self):","        ","        coords = (1, 2)","        neighbors = boggle.neighbors_of_position(coords)","        self.assertIn((0, 1))"],"id":258},{"start":{"row":0,"column":0},"end":{"row":68,"column":73},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"]}],[{"start":{"row":68,"column":73},"end":{"row":69,"column":0},"action":"insert","lines":["",""],"id":259},{"start":{"row":69,"column":0},"end":{"row":69,"column":12},"action":"insert","lines":["            "]},{"start":{"row":69,"column":12},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":70,"column":8},"end":{"row":70,"column":12},"action":"remove","lines":["    "],"id":260},{"start":{"row":70,"column":4},"end":{"row":70,"column":8},"action":"remove","lines":["    "]},{"start":{"row":70,"column":0},"end":{"row":70,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":70,"column":0},"end":{"row":70,"column":1},"action":"insert","lines":[" "],"id":261},{"start":{"row":70,"column":1},"end":{"row":70,"column":2},"action":"insert","lines":[" "]},{"start":{"row":70,"column":2},"end":{"row":70,"column":3},"action":"insert","lines":[" "]},{"start":{"row":70,"column":3},"end":{"row":70,"column":4},"action":"insert","lines":[" "]},{"start":{"row":70,"column":4},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":71,"column":4},"end":{"row":71,"column":5},"action":"insert","lines":["d"],"id":262},{"start":{"row":71,"column":5},"end":{"row":71,"column":6},"action":"insert","lines":["e"]},{"start":{"row":71,"column":6},"end":{"row":71,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":71,"column":7},"end":{"row":71,"column":8},"action":"insert","lines":[" "],"id":263},{"start":{"row":71,"column":8},"end":{"row":71,"column":9},"action":"insert","lines":["e"]},{"start":{"row":71,"column":9},"end":{"row":71,"column":10},"action":"insert","lines":["s"]}],[{"start":{"row":71,"column":9},"end":{"row":71,"column":10},"action":"remove","lines":["s"],"id":264},{"start":{"row":71,"column":8},"end":{"row":71,"column":9},"action":"remove","lines":["e"]},{"start":{"row":71,"column":7},"end":{"row":71,"column":8},"action":"remove","lines":[" "]},{"start":{"row":71,"column":6},"end":{"row":71,"column":7},"action":"remove","lines":["f"]},{"start":{"row":71,"column":5},"end":{"row":71,"column":6},"action":"remove","lines":["e"]},{"start":{"row":71,"column":4},"end":{"row":71,"column":5},"action":"remove","lines":["d"]}],[{"start":{"row":71,"column":4},"end":{"row":72,"column":0},"action":"insert","lines":["",""],"id":265},{"start":{"row":72,"column":0},"end":{"row":72,"column":4},"action":"insert","lines":["    "]},{"start":{"row":72,"column":4},"end":{"row":73,"column":0},"action":"insert","lines":["",""]},{"start":{"row":73,"column":0},"end":{"row":73,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":73,"column":4},"end":{"row":73,"column":5},"action":"insert","lines":["g"],"id":266},{"start":{"row":73,"column":5},"end":{"row":73,"column":6},"action":"insert","lines":["r"]},{"start":{"row":73,"column":6},"end":{"row":73,"column":7},"action":"insert","lines":["i"]}],[{"start":{"row":73,"column":6},"end":{"row":73,"column":7},"action":"remove","lines":["i"],"id":267},{"start":{"row":73,"column":5},"end":{"row":73,"column":6},"action":"remove","lines":["r"]},{"start":{"row":73,"column":4},"end":{"row":73,"column":5},"action":"remove","lines":["g"]}],[{"start":{"row":73,"column":4},"end":{"row":73,"column":5},"action":"insert","lines":[" "],"id":268},{"start":{"row":73,"column":5},"end":{"row":73,"column":6},"action":"insert","lines":[" "]},{"start":{"row":73,"column":6},"end":{"row":73,"column":7},"action":"insert","lines":[" "]},{"start":{"row":73,"column":7},"end":{"row":73,"column":8},"action":"insert","lines":[" "]},{"start":{"row":73,"column":8},"end":{"row":73,"column":9},"action":"insert","lines":["g"]},{"start":{"row":73,"column":9},"end":{"row":73,"column":10},"action":"insert","lines":["r"]}],[{"start":{"row":73,"column":10},"end":{"row":73,"column":11},"action":"insert","lines":["i"],"id":269},{"start":{"row":73,"column":11},"end":{"row":73,"column":12},"action":"insert","lines":["d"]}],[{"start":{"row":73,"column":12},"end":{"row":73,"column":13},"action":"insert","lines":[" "],"id":270},{"start":{"row":73,"column":13},"end":{"row":73,"column":14},"action":"insert","lines":["="]}],[{"start":{"row":73,"column":14},"end":{"row":73,"column":15},"action":"insert","lines":[" "],"id":271},{"start":{"row":73,"column":15},"end":{"row":73,"column":16},"action":"insert","lines":["b"]}],[{"start":{"row":73,"column":16},"end":{"row":73,"column":17},"action":"insert","lines":["o"],"id":272},{"start":{"row":73,"column":17},"end":{"row":73,"column":18},"action":"insert","lines":["g"]},{"start":{"row":73,"column":18},"end":{"row":73,"column":19},"action":"insert","lines":["g"]},{"start":{"row":73,"column":19},"end":{"row":73,"column":20},"action":"insert","lines":["l"]}],[{"start":{"row":73,"column":20},"end":{"row":73,"column":21},"action":"insert","lines":["e"],"id":273},{"start":{"row":73,"column":21},"end":{"row":73,"column":22},"action":"insert","lines":["."]},{"start":{"row":73,"column":22},"end":{"row":73,"column":23},"action":"insert","lines":["m"]},{"start":{"row":73,"column":23},"end":{"row":73,"column":24},"action":"insert","lines":["a"]},{"start":{"row":73,"column":24},"end":{"row":73,"column":25},"action":"insert","lines":["k"]}],[{"start":{"row":73,"column":22},"end":{"row":73,"column":25},"action":"remove","lines":["mak"],"id":274},{"start":{"row":73,"column":22},"end":{"row":73,"column":31},"action":"insert","lines":["make_grid"]}],[{"start":{"row":73,"column":31},"end":{"row":73,"column":33},"action":"insert","lines":["()"],"id":275}],[{"start":{"row":73,"column":32},"end":{"row":73,"column":33},"action":"insert","lines":["2"],"id":276},{"start":{"row":73,"column":33},"end":{"row":73,"column":34},"action":"insert","lines":[","]}],[{"start":{"row":73,"column":34},"end":{"row":73,"column":35},"action":"insert","lines":[" "],"id":277},{"start":{"row":73,"column":35},"end":{"row":73,"column":36},"action":"insert","lines":["2"]}],[{"start":{"row":73,"column":37},"end":{"row":74,"column":0},"action":"insert","lines":["",""],"id":278},{"start":{"row":74,"column":0},"end":{"row":74,"column":8},"action":"insert","lines":["        "]},{"start":{"row":74,"column":8},"end":{"row":74,"column":9},"action":"insert","lines":["o"]},{"start":{"row":74,"column":9},"end":{"row":74,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":74,"column":10},"end":{"row":74,"column":11},"action":"insert","lines":["e"],"id":279},{"start":{"row":74,"column":11},"end":{"row":74,"column":12},"action":"insert","lines":["L"]},{"start":{"row":74,"column":12},"end":{"row":74,"column":13},"action":"insert","lines":["e"]},{"start":{"row":74,"column":13},"end":{"row":74,"column":14},"action":"insert","lines":["t"]},{"start":{"row":74,"column":14},"end":{"row":74,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":74,"column":15},"end":{"row":74,"column":16},"action":"insert","lines":["e"],"id":280},{"start":{"row":74,"column":16},"end":{"row":74,"column":17},"action":"insert","lines":["r"]},{"start":{"row":74,"column":17},"end":{"row":74,"column":18},"action":"insert","lines":["W"]},{"start":{"row":74,"column":18},"end":{"row":74,"column":19},"action":"insert","lines":["o"]},{"start":{"row":74,"column":19},"end":{"row":74,"column":20},"action":"insert","lines":["r"]},{"start":{"row":74,"column":20},"end":{"row":74,"column":21},"action":"insert","lines":["d"]}],[{"start":{"row":74,"column":21},"end":{"row":74,"column":22},"action":"insert","lines":[" "],"id":281},{"start":{"row":74,"column":22},"end":{"row":74,"column":23},"action":"insert","lines":["="]}],[{"start":{"row":74,"column":23},"end":{"row":74,"column":24},"action":"insert","lines":[" "],"id":282},{"start":{"row":74,"column":24},"end":{"row":74,"column":25},"action":"insert","lines":["b"]},{"start":{"row":74,"column":25},"end":{"row":74,"column":26},"action":"insert","lines":["o"]},{"start":{"row":74,"column":26},"end":{"row":74,"column":27},"action":"insert","lines":["g"]},{"start":{"row":74,"column":27},"end":{"row":74,"column":28},"action":"insert","lines":["g"]},{"start":{"row":74,"column":28},"end":{"row":74,"column":29},"action":"insert","lines":["l"]},{"start":{"row":74,"column":29},"end":{"row":74,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":74,"column":30},"end":{"row":74,"column":31},"action":"insert","lines":["."],"id":283},{"start":{"row":74,"column":31},"end":{"row":74,"column":32},"action":"insert","lines":["p"]},{"start":{"row":74,"column":32},"end":{"row":74,"column":33},"action":"insert","lines":["a"]},{"start":{"row":74,"column":33},"end":{"row":74,"column":34},"action":"insert","lines":["t"]},{"start":{"row":74,"column":34},"end":{"row":74,"column":35},"action":"insert","lines":["h"]}],[{"start":{"row":74,"column":35},"end":{"row":74,"column":36},"action":"insert","lines":["-"],"id":284},{"start":{"row":74,"column":36},"end":{"row":74,"column":37},"action":"insert","lines":["t"]},{"start":{"row":74,"column":37},"end":{"row":74,"column":38},"action":"insert","lines":["o"]},{"start":{"row":74,"column":38},"end":{"row":74,"column":39},"action":"insert","lines":["_"]}],[{"start":{"row":74,"column":38},"end":{"row":74,"column":39},"action":"remove","lines":["_"],"id":285},{"start":{"row":74,"column":37},"end":{"row":74,"column":38},"action":"remove","lines":["o"]},{"start":{"row":74,"column":36},"end":{"row":74,"column":37},"action":"remove","lines":["t"]},{"start":{"row":74,"column":35},"end":{"row":74,"column":36},"action":"remove","lines":["-"]}],[{"start":{"row":74,"column":35},"end":{"row":74,"column":36},"action":"insert","lines":["_"],"id":286},{"start":{"row":74,"column":36},"end":{"row":74,"column":37},"action":"insert","lines":["t"]},{"start":{"row":74,"column":37},"end":{"row":74,"column":38},"action":"insert","lines":["o"]},{"start":{"row":74,"column":38},"end":{"row":74,"column":39},"action":"insert","lines":["_"]}],[{"start":{"row":74,"column":39},"end":{"row":74,"column":40},"action":"insert","lines":["w"],"id":287},{"start":{"row":74,"column":40},"end":{"row":74,"column":41},"action":"insert","lines":["o"]},{"start":{"row":74,"column":41},"end":{"row":74,"column":42},"action":"insert","lines":["r"]},{"start":{"row":74,"column":42},"end":{"row":74,"column":43},"action":"insert","lines":["d"]}],[{"start":{"row":74,"column":43},"end":{"row":74,"column":45},"action":"insert","lines":["()"],"id":288}],[{"start":{"row":74,"column":44},"end":{"row":74,"column":45},"action":"insert","lines":["g"],"id":289},{"start":{"row":74,"column":45},"end":{"row":74,"column":46},"action":"insert","lines":["r"]},{"start":{"row":74,"column":46},"end":{"row":74,"column":47},"action":"insert","lines":["i"]},{"start":{"row":74,"column":47},"end":{"row":74,"column":48},"action":"insert","lines":["d"]},{"start":{"row":74,"column":48},"end":{"row":74,"column":49},"action":"insert","lines":[","]}],[{"start":{"row":74,"column":49},"end":{"row":74,"column":50},"action":"insert","lines":[" "],"id":290}],[{"start":{"row":74,"column":50},"end":{"row":74,"column":52},"action":"insert","lines":["[]"],"id":291}],[{"start":{"row":74,"column":51},"end":{"row":74,"column":53},"action":"insert","lines":["()"],"id":292}],[{"start":{"row":74,"column":52},"end":{"row":74,"column":53},"action":"insert","lines":["o"],"id":293},{"start":{"row":74,"column":53},"end":{"row":74,"column":54},"action":"insert","lines":[","]}],[{"start":{"row":74,"column":54},"end":{"row":74,"column":55},"action":"insert","lines":[" "],"id":294},{"start":{"row":74,"column":55},"end":{"row":74,"column":56},"action":"insert","lines":["0"]}],[{"start":{"row":74,"column":55},"end":{"row":74,"column":56},"action":"remove","lines":["0"],"id":295},{"start":{"row":74,"column":54},"end":{"row":74,"column":55},"action":"remove","lines":[" "]},{"start":{"row":74,"column":53},"end":{"row":74,"column":54},"action":"remove","lines":[","]},{"start":{"row":74,"column":52},"end":{"row":74,"column":53},"action":"remove","lines":["o"]}],[{"start":{"row":74,"column":52},"end":{"row":74,"column":53},"action":"insert","lines":["0"],"id":296},{"start":{"row":74,"column":53},"end":{"row":74,"column":54},"action":"insert","lines":[","]},{"start":{"row":74,"column":54},"end":{"row":74,"column":55},"action":"insert","lines":["0"]}],[{"start":{"row":74,"column":54},"end":{"row":74,"column":55},"action":"remove","lines":["0"],"id":297}],[{"start":{"row":74,"column":54},"end":{"row":74,"column":55},"action":"insert","lines":[" "],"id":298},{"start":{"row":74,"column":55},"end":{"row":74,"column":56},"action":"insert","lines":["0"]}],[{"start":{"row":74,"column":59},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":299},{"start":{"row":75,"column":0},"end":{"row":75,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":75,"column":8},"end":{"row":75,"column":9},"action":"insert","lines":["w"],"id":300},{"start":{"row":75,"column":9},"end":{"row":75,"column":10},"action":"insert","lines":["o"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["L"]},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"insert","lines":["e"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"remove","lines":["t"],"id":301},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"remove","lines":["e"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"remove","lines":["L"]},{"start":{"row":75,"column":9},"end":{"row":75,"column":10},"action":"remove","lines":["o"]},{"start":{"row":75,"column":8},"end":{"row":75,"column":9},"action":"remove","lines":["w"]}],[{"start":{"row":75,"column":8},"end":{"row":75,"column":9},"action":"insert","lines":["w"],"id":302},{"start":{"row":75,"column":9},"end":{"row":75,"column":10},"action":"insert","lines":["o"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["L"]},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"insert","lines":["e"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"insert","lines":["t"]},{"start":{"row":75,"column":13},"end":{"row":75,"column":14},"action":"insert","lines":["t"]},{"start":{"row":75,"column":14},"end":{"row":75,"column":15},"action":"insert","lines":["e"]},{"start":{"row":75,"column":15},"end":{"row":75,"column":16},"action":"insert","lines":["r"]}],[{"start":{"row":75,"column":15},"end":{"row":75,"column":16},"action":"remove","lines":["r"],"id":303},{"start":{"row":75,"column":14},"end":{"row":75,"column":15},"action":"remove","lines":["e"]},{"start":{"row":75,"column":13},"end":{"row":75,"column":14},"action":"remove","lines":["t"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"remove","lines":["t"]},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"remove","lines":["e"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"remove","lines":["L"]},{"start":{"row":75,"column":9},"end":{"row":75,"column":10},"action":"remove","lines":["o"]},{"start":{"row":75,"column":8},"end":{"row":75,"column":9},"action":"remove","lines":["w"]}],[{"start":{"row":75,"column":8},"end":{"row":75,"column":9},"action":"insert","lines":["t"],"id":304},{"start":{"row":75,"column":9},"end":{"row":75,"column":10},"action":"insert","lines":["w"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["o"]},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"insert","lines":["L"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"insert","lines":["e"]},{"start":{"row":75,"column":13},"end":{"row":75,"column":14},"action":"insert","lines":["t"]},{"start":{"row":75,"column":14},"end":{"row":75,"column":15},"action":"insert","lines":["t"]},{"start":{"row":75,"column":15},"end":{"row":75,"column":16},"action":"insert","lines":["e"]}],[{"start":{"row":75,"column":16},"end":{"row":75,"column":17},"action":"insert","lines":["r"],"id":305},{"start":{"row":75,"column":17},"end":{"row":75,"column":18},"action":"insert","lines":["W"]},{"start":{"row":75,"column":18},"end":{"row":75,"column":19},"action":"insert","lines":["o"]},{"start":{"row":75,"column":19},"end":{"row":75,"column":20},"action":"insert","lines":["r"]},{"start":{"row":75,"column":20},"end":{"row":75,"column":21},"action":"insert","lines":["d"]}],[{"start":{"row":75,"column":21},"end":{"row":75,"column":22},"action":"insert","lines":[" "],"id":306},{"start":{"row":75,"column":22},"end":{"row":75,"column":23},"action":"insert","lines":["="]}],[{"start":{"row":75,"column":23},"end":{"row":75,"column":24},"action":"insert","lines":[" "],"id":307},{"start":{"row":75,"column":24},"end":{"row":75,"column":25},"action":"insert","lines":["b"]},{"start":{"row":75,"column":25},"end":{"row":75,"column":26},"action":"insert","lines":["o"]},{"start":{"row":75,"column":26},"end":{"row":75,"column":27},"action":"insert","lines":["g"]},{"start":{"row":75,"column":27},"end":{"row":75,"column":28},"action":"insert","lines":["g"]},{"start":{"row":75,"column":28},"end":{"row":75,"column":29},"action":"insert","lines":["l"]},{"start":{"row":75,"column":29},"end":{"row":75,"column":30},"action":"insert","lines":["e"]},{"start":{"row":75,"column":30},"end":{"row":75,"column":31},"action":"insert","lines":["."]}],[{"start":{"row":75,"column":31},"end":{"row":75,"column":32},"action":"insert","lines":["p"],"id":308},{"start":{"row":75,"column":32},"end":{"row":75,"column":33},"action":"insert","lines":["a"]},{"start":{"row":75,"column":33},"end":{"row":75,"column":34},"action":"insert","lines":["t"]},{"start":{"row":75,"column":34},"end":{"row":75,"column":35},"action":"insert","lines":["h"]},{"start":{"row":75,"column":35},"end":{"row":75,"column":36},"action":"insert","lines":["_"]}],[{"start":{"row":75,"column":31},"end":{"row":75,"column":36},"action":"remove","lines":["path_"],"id":309},{"start":{"row":75,"column":31},"end":{"row":75,"column":43},"action":"insert","lines":["path_to_word"]}],[{"start":{"row":75,"column":43},"end":{"row":75,"column":45},"action":"insert","lines":["()"],"id":310}],[{"start":{"row":75,"column":44},"end":{"row":75,"column":45},"action":"insert","lines":["r"],"id":311},{"start":{"row":75,"column":45},"end":{"row":75,"column":46},"action":"insert","lines":["i"]},{"start":{"row":75,"column":46},"end":{"row":75,"column":47},"action":"insert","lines":["d"]}],[{"start":{"row":75,"column":46},"end":{"row":75,"column":47},"action":"remove","lines":["d"],"id":312},{"start":{"row":75,"column":45},"end":{"row":75,"column":46},"action":"remove","lines":["i"]},{"start":{"row":75,"column":44},"end":{"row":75,"column":45},"action":"remove","lines":["r"]}],[{"start":{"row":75,"column":44},"end":{"row":75,"column":45},"action":"insert","lines":["g"],"id":313},{"start":{"row":75,"column":45},"end":{"row":75,"column":46},"action":"insert","lines":["r"]},{"start":{"row":75,"column":46},"end":{"row":75,"column":47},"action":"insert","lines":["i"]},{"start":{"row":75,"column":47},"end":{"row":75,"column":48},"action":"insert","lines":["d"]},{"start":{"row":75,"column":48},"end":{"row":75,"column":49},"action":"insert","lines":[","]}],[{"start":{"row":75,"column":49},"end":{"row":75,"column":50},"action":"insert","lines":[" "],"id":314}],[{"start":{"row":75,"column":50},"end":{"row":75,"column":52},"action":"insert","lines":["[]"],"id":315}],[{"start":{"row":75,"column":51},"end":{"row":75,"column":53},"action":"insert","lines":["()"],"id":316}],[{"start":{"row":75,"column":52},"end":{"row":75,"column":53},"action":"insert","lines":["0"],"id":317},{"start":{"row":75,"column":53},"end":{"row":75,"column":54},"action":"insert","lines":[","]}],[{"start":{"row":75,"column":54},"end":{"row":75,"column":55},"action":"insert","lines":[" "],"id":318},{"start":{"row":75,"column":55},"end":{"row":75,"column":56},"action":"insert","lines":["0"]}],[{"start":{"row":75,"column":57},"end":{"row":75,"column":58},"action":"insert","lines":[","],"id":319}],[{"start":{"row":75,"column":58},"end":{"row":75,"column":59},"action":"insert","lines":[" "],"id":320}],[{"start":{"row":75,"column":59},"end":{"row":75,"column":61},"action":"insert","lines":["()"],"id":321}],[{"start":{"row":75,"column":60},"end":{"row":75,"column":61},"action":"insert","lines":["0"],"id":322},{"start":{"row":75,"column":61},"end":{"row":75,"column":62},"action":"insert","lines":[","]}],[{"start":{"row":75,"column":62},"end":{"row":75,"column":63},"action":"insert","lines":[" "],"id":323},{"start":{"row":75,"column":63},"end":{"row":75,"column":64},"action":"insert","lines":["1"]}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":67},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","            ","    ","    ","    ","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (0, 1)])"],"id":324},{"start":{"row":0,"column":0},"end":{"row":102,"column":46},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)"]}],[{"start":{"row":0,"column":0},"end":{"row":102,"column":46},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)"],"id":325},{"start":{"row":0,"column":0},"end":{"row":105,"column":46},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        ","        fullwords = [twoLetterWord, threeLetterWord, notThereWord]","        stems = ['A', 'AB', 'E', 'EE']","        dictionary = fullwords, stems","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)"]}]]},"ace":{"folds":[],"scrolltop":1124.5625,"scrollleft":0,"selection":{"start":{"row":106,"column":8},"end":{"row":106,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":81,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1574882798953,"hash":"79e8746f731e07cf14f1802474d34844263b3b23"}